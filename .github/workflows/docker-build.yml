name: Dockerizing to Amazon ECR

on:
  push: # 트리거
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: chrome-extension-frontend-ecr # set this to your Amazon ECR repository name
  AWS_FUNCTION_NAME: chrome-extension-frontend-lambda
  AWS_API_GATEWAY_NAME: chrome-extension-frontend
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_LAMBDA_ROLE: ${{ secrets.AWS_LAMBDA_ROLE }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create .env file
        run: |
          jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' <<< "$SECRETS_CONTEXT" > .env
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}

      - name: Upload .env to Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: env-file
          path: .env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # 나의 ECR 정보
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download .env Artifact
        uses: actions/download-artifact@v2
        with:
          name: env-file
          path: .

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          export IMAGE_TAG=latest

          docker-compose build
          docker-compose push

      - name: Delete Artifact
        if: always() # Ensures this step always runs
        uses: geekyeggo/delete-artifact@v1
        with:
          name: env-file

      - name: Deploy to Lambda
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          FUNCTION_EXISTS=$(aws lambda get-function --function-name $AWS_FUNCTION_NAME || echo "not exists")
          if [[ $FUNCTION_EXISTS == "not exists" ]]; then
            aws lambda create-function --function-name $AWS_FUNCTION_NAME \
              --package-type Image \
              --code ImageUri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
              --role arn:aws:iam::$AWS_ACCOUNT_ID:role/$AWS_LAMBDA_ROLE
          else
            aws lambda update-function-code --function-name $AWS_FUNCTION_NAME \
              --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          fi
